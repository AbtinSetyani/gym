#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

environment:
  # See README for information on the token
  binstar_token:
    secure: va2cH3651uru58ThstGxm6R/Rvjw4xC13WnQFQpP0bgc8IjYrbBJWLLMvrCuSgWF

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python27_32"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      CONDA_PY: "27"
      CONDA_NPY: "18"

    - PYTHON: "C:\\Python27_64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      CONDA_PY: "27"
      CONDA_NPY: "18"

    - PYTHON: "C:\\Python34_32"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      CONDA_PY: "34"
      CONDA_NPY: "18"

    - PYTHON: "C:\\Python34_64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      CONDA_PY: "34"
      CONDA_NPY: "18"

install:
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  - powershell .\\ci\\appveyor\\install.ps1
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - ps: choco install ffmpeg
  - ps: choco install golang
  - ps: choco install swig
  - ps: choco feature enable -n allowGlobalConfirmation
  - ps: setx PYTHONPATH "$env:PYTHONPATH;C:\Workspace\gym-vnc" -m

  # Get blas from ancaonda
  - "%CMD_IN_ENV% conda install -y scipy==0.17.1"

  - "%CMD_IN_ENV% pip install -r requirements.txt & dir"
  - "%CMD_IN_ENV% pip install -r requirements_dev.txt & dir"

build: false


# enable patching of AssemblyInfo.* files
assembly_info:
  patch: true
  file: AssemblyInfo.*
  assembly_version: "2.2.{build}"
  assembly_file_version: "{version}"
  assembly_informational_version: "{version}"


# Automatically register private account and/or project AppVeyor NuGet feeds.
#nuget:
#  account_feed: true
#  project_feed: true
#  disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to
#                                  # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
#configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
#  assemblies:
#    - asm1.dll
#    - asm2.dll
#
#  categories:
#    - UI
#    - E2E

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
#before_test:
#  - echo script1
#  - ps: Write-Host "script1"

# scripts to run after tests
#after_test:

# to run your custom scripts instead of automatic tests
test_script:
  - nose2

# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#artifacts:
#
#  # pushing a single file
#  - path: test.zip
#
#  # pushing a single file with environment variable in path and "Deployment name" specified
#  - path: MyProject\bin\$(configuration)
#    name: myapp
#
#  # pushing entire folder as a zip archive
#  - path: logs
#
#  # pushing all *.nupkg files in build directory recursively
#  - path: '**\*.nupkg'


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:
#
#    # FTP deployment provider settings
#  - provider: FTP
#    protocol: ftp|ftps|sftp
#    host: ftp.myserver.com
#    username: admin
#    password:
#      secure: eYKZKFkkEvFYWX6NfjZIVw==
#    folder:
#    application:
#    active_mode: false
#    beta: true      # enable alternative FTP library for 'ftp' and 'ftps' modes
#    debug: true     # show complete FTP log
#
#    # Amazon S3 deployment provider settings
#  - provider: S3
#    access_key_id:
#      secure: ABcd==
#    secret_access_key:
#      secure: ABcd==
#    bucket: my_bucket
#    folder:
#    artifact:
#    set_public: false
#
#    # Azure Blob storage deployment provider settings
#  - provider: AzureBlob
#    storage_account_name:
#      secure: ABcd==
#    storage_access_key:
#      secure: ABcd==
#    container: my_container
#    folder:
#    artifact:
#
#    # Web Deploy deployment provider settings
#  - provider: WebDeploy
#    server: http://www.deploy.com/myendpoint
#    website: mywebsite
#    username: user
#    password:
#      secure: eYKZKFkkEvFYWX6NfjZIVw==
#    ntlm: false
#    remove_files: false
#    app_offline: false
#    do_not_use_checksum: true           # do not use check sum for comparing source and destination files. By default checksums are used.
#    sync_retry_attempts: 2              # sync attempts, max
#    sync_retry_interval: 2000           # timeout between sync attempts, milliseconds
#    aspnet_core: true                   # artifact zip contains ASP.NET Core application
#    aspnet_core_force_restart: true     # poke app's web.config before deploy to force application restart
#    skip_dirs: \\App_Data
#    skip_files: web.config
#    on:
#      branch: release
#      platform: x86
#      configuration: debug
#
#    # Deploying to Azure Cloud Service
#  - provider: AzureCS
#    subscription_id:
#      secure: fjZIVw==
#    subscription_certificate:
#      secure: eYKZKFkkEv...FYWX6NfjZIVw==
#    storage_account_name: my_storage
#    storage_access_key:
#      secure: ABcd==
#    service: my_service
#    slot: Production
#    target_profile: Cloud
#    artifact: MyPackage.cspkg
#
#    # Deploying to NuGet feed
#  - provider: NuGet
#    server: https://my.nuget.server/feed
#    api_key:
#      secure: FYWX6NfjZIVw==
#    skip_symbols: false
#    symbol_server: https://your.symbol.server/feed
#    artifact: MyPackage.nupkg
#
#    # Deploy to GitHub Releases
#  - provider: GitHub
#    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#    draft: false
#    prerelease: false
#    on:
#      branch: master                # release from master branch only
#      appveyor_repo_tag: true       # deploy on tag push only
#
#    # Deploying to a named environment
#  - provider: Environment
#    name: staging
#    on:
#      branch: staging
#      env_var1: value1
#      env_var2: value2

## scripts to run before deployment
#before_deploy:
#
## scripts to run after deployment
#after_deploy:
#
## to run your custom scripts instead of provider deployments
#deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

## on successful build
#on_success:
#  - do something
#
## on build failure
#on_failure:
#  - do something
#
## after build failure or success
#on_finish:
#  - do something


#---------------------------------#
#         notifications           #
#---------------------------------#

#notifications:
#
#  # Email
#  - provider: Email
#    to:
#      - user1@email.com
#      - user2@email.com
#    subject: 'Build {{status}}'                  # optional
#    message: "{{message}}, {{commitId}}, ..."    # optional
#    on_build_status_changed: true
#
#  # HipChat
#  - provider: HipChat
#    auth_token:
#      secure: RbOnSMSFKYzxzFRrxM1+XA==
#    room: ProjectA
#    template: "{message}, {commitId}, ..."
#
#  # Slack
#  - provider: Slack
#    incoming_webhook: http://incoming-webhook-url
#
#  # ...or using auth token
#
#  - provider: Slack
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    channel: development
#    template: "{message}, {commitId}, ..."
#
#  # Campfire
#  - provider: Campfire
#    account: appveyor
#    auth_token:
#      secure: RifLRG8Vfyol+sNhj9u2JA==
#    room: ProjectA
#    template: "{message}, {commitId}, ..."
#
#  # Webhook
#  - provider: Webhook
#    url: http://www.myhook2.com
#    headers:
#      User-Agent: myapp 1.0
#      Authorization:
#        secure: GhD+5xhLz/tkYY6AO3fcfQ==
#    on_build_success: false
#    on_build_failure: true
#    on_build_status_changed: true

on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))